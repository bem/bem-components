block('button')(
    tag()(function() {
        return this.ctx.tag || 'button';
    }),

    js()(true),

    // NOTE: mix below is to satisfy interface of `control`
    mix()({ elem : 'control' }),

    attrs()(
        // Common attributes
        function() {
            var ctx = this.ctx;

            return {
                role : 'button',
                accesskey : ctx.accesskey,
                tabindex : ctx.tabIndex,
                id : ctx.id,
                title : ctx.title,
                'aria-label' : ctx.ariaLabel,
                'aria-labelledby' : ctx.ariaLabelledBy
            };
        },

        // Attributes for button variant
        match(function() { return !this.mods.type || this.mods.type === 'submit'; })(function() {
            var ctx = this.ctx,
                attrs = {
                    type : this.mods.type || 'button',
                    name : ctx.name,
                    value : ctx.val
                };

            this.mods.togglable && (attrs['aria-pressed'] = !!this.mods.checked);

            this.mods.disabled && (attrs.disabled = 'disabled');

            return this.extend(applyNext(), attrs);
        })
    ),

    content()(
        function() {
            var ctx = this.ctx,
                content = [ctx.icon];
            // NOTE: wasn't moved to separate template for optimization
            'text' in ctx && content.push({ elem : 'text', content : ctx.text });
            return content;
        },
        match(function() { return typeof this.ctx.content !== 'undefined'; })(function() {
            return this.ctx.content;
        })
    )
);
