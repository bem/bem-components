block('radio-button').elem('radio')(

    // TODO: copy-paste with common.blocks/radiobox/__radio/radiobox__radio.bemhtml
    def().match(!this._controlAttrs)(function() {
        var ctx = this.ctx,
            radioButton = this._radioButton,
            radioButtonDisabled = radioButton.mods && radioButton.mods.disabled,
            elemMods = ctx.elemMods || {},
            controlAttrs = ctx.controlAttrs || {},
            // value блока совпало с value в controlAttrs элемента radio
            valuesMatched = typeof controlAttrs.value !== 'undefined' && controlAttrs.value == radioButton.value;

        controlAttrs.checked = valuesMatched || elemMods.checked;
        controlAttrs.disabled = radioButtonDisabled || elemMods.disabled;
        controlAttrs.id || (controlAttrs.id = this.generateId());

        valuesMatched && (elemMods.checked = 'yes');
        controlAttrs.checked && (elemMods.pressed = 'yes');
        radioButtonDisabled && (elemMods.disabled = 'yes');

        var side = this.isFirst() + this.isLast();
        side && (elemMods.side = side > 1 ?
            'both' :
            this.isFirst() ? 'left' : 'right');

        if(controlAttrs.checked && !this.isLast()) {
            this._radioNextForChecked = true;
        } else if(this._radioNextForChecked) {
            elemMods['next-for-pressed'] = 'yes';
            delete this._radioNextForChecked;
        }

        apply('', { '_controlAttrs' : controlAttrs })
    }),

    tag()('label'),

    attrs()(function() { return { 'for': this._controlAttrs.id } }),

    content()(function() {
        return [
            { elem: 'control' },
            {
                elem: 'text',
                tag: 'span',
                content: this.ctx.content
            }
        ]
    })

)
