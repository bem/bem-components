block radio-button, elem radio {

    default: {
        var ctx = this.ctx,
            elemMods = ctx.elemMods || {},
            ctxControlAttrs = ctx.controlAttrs || {},
            controlAttrs = this._.extend(ctxControlAttrs, {
                checked: (this._value != undefined && this._value == ctxControlAttrs.value || elemMods.checked) &&
                    (this._nextForChecked = true),
                disabled: this._modsDisabled || elemMods.disabled
            });

        controlAttrs['id'] || (controlAttrs['id'] = this.generateId());

        return applyNext(this._controlAttrs = controlAttrs);
    }

    tag: 'label'

    attrs: { 'for': this._controlAttrs['id'] }

    mix: {
        var elemMods = this.ctx.elemMods || {},
            side = this.isFirst() + this.isLast(),
            controlAttrs = this._controlAttrs,
            m = [];

        side && m.push({ elemMods: { side: (side > 1 ? 'both' : (this.isFirst() ? 'left' : 'right')) } });

        this._nextForChecked && !controlAttrs.checked && (
            this._nextForChecked = null, m.push({ elemMods: { 'next-for-pressed': 'yes' } }));

        elemMods.disabled || controlAttrs.disabled && m.push({ elemMods: { disabled: 'yes' } });

        controlAttrs.checked && m.push({
            elemMods: elemMods.checked ? { pressed: 'yes' } : { checked: 'yes', pressed: 'yes' }
        });

        return m;
    }

    content: [
        { elem: 'control' },
        {
            elem: 'text',
            tag: 'span',
            content: this.ctx.content
        }
    ]

}
