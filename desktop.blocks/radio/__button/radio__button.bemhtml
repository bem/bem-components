block radio {

    elem button {
        default, !this._inputId: {
            local(
                this._inputAttrs = this._.extend(this._inputAttrs, this.ctx.inputAttrs), // TODO: refactor
                this._inputId = this._inputAttrs.id || this.generateId(),
                this._inputAttrs.id = this._inputId,
                this._inputAttrs.checked = (this.elemMods.checked && (this._nextForChecked = true, this.elemMods.checked)),
                this._inputAttrs.disabled = this.elemMods.disabled
            ) this.apply()
        }

        js: true

        tag: 'label'

        attrs: { 'for': this._inputId }

        mix: {
            var m = [],
                side = this.isFirst() + this.isLast();

            side &&
                m.push({ elemMods: { side: (side > 1 ? 'both' : (this.isFirst() ? 'left' : 'right')) } });

            this._nextForChecked && !this._inputAttrs.checked && (
                    this._nextForChecked = null, m.push({ elemMods: { 'next-for-pressed': 'yes' } }));

            this._inputAttrs.checked && m.push({ elemMods: { 'pressed': 'yes' } });

            return m;
        }

        content: [
            { elem: 'click' },
            { elem: 'control' },
            { elem: 'text', content: this.ctx.content }
        ]

    }

    elem control {
        tag: 'input'
        attrs: {
            var a = this._inputAttrs;

            if(!a.disabled)
                delete a.disabled
            else
                a.disabled = 'disabled';

            if(!a.checked)
                delete a.checked
            else
                a.checked = 'checked';

            a.type = 'radio';

            typeof a.value === 'undefined' && delete a.value;

            return a;
        }
    }

    elem text, tag: 'span'

    elem click, tag: 'i'
}
